# ============================
# Basic Redis master configuration
# ============================

port 6379
# Cổng Redis lắng nghe. Mặc định là 6379.
# => Có thể đổi nếu cần deploy nhiều Redis trên cùng server.

dir /data
# Thư mục nơi Redis lưu dữ liệu (AOF/RDB). 
# => Đảm bảo folder /data tồn tại và Redis có quyền ghi.

# ============================
# Persistence options (Tùy chọn lưu trữ dữ liệu)
# ============================

# TODO: uncomment 
# appendonly yes
# # BẬT chế độ ghi AOF (Append Only File) - giúp giảm rủi ro mất dữ liệu khi Redis crash.
# # => GỢI Ý: 
# #    + Nếu TEST hiệu năng (benchmark), nên tạm thời tắt: appendonly no và save "" để tăng tốc độ ghi.

# appendfilename "appendonly.aof"
# # Tên file AOF sẽ lưu trên ổ đĩa.

# appendfsync everysec
# # Redis flush AOF ra đĩa mỗi 1 giây.
# # => GỢI Ý: 
# #    + Nếu cần hiệu suất cao hơn, có thể dùng appendfsync no (OS tự flush).
# #    + Nếu cần độ bền cao hơn (nhưng hiệu suất thấp hơn), dùng appendfsync always.
appendonly no
save ""

# ============================
# Logging
# ============================

loglevel notice
# Mức độ ghi log: debug, verbose, notice, warning.
# => GỢI Ý: 
#    + "notice" là mức khuyến nghị cho Production (không quá nhiều log, dễ đọc).

logfile ""
# Để trống "" để log ra stdout (thường dùng trong Docker hoặc systemd).
# => Nếu chạy server bình thường, nên log ra file riêng ví dụ: logfile "/var/log/redis/redis.log"

# ============================
# Security (Bảo mật Redis)
# ============================

# requirepass yourStrongPassword
# Mật khẩu bảo vệ Redis server.
# => GỢI Ý: 
#    + BẮT BUỘC bật requirepass trong môi trường Production.
#    + Kết hợp firewall/Security Group để chặn truy cập trái phép vào Redis port.

# ============================
# Performance tuning (Tối ưu hiệu năng)
# ============================

# maxmemory 256mb
# Giới hạn RAM Redis được phép sử dụng.
# => GỢI Ý:
#    + Nên thiết lập khoảng 60%-80% RAM vật lý server.
#    + Tránh để Redis chiếm hết RAM, gây crash hệ thống.

# maxmemory-policy allkeys-lru
# Chính sách xóa key khi hết RAM.
# => GỢI Ý:
#    + "allkeys-lru" = xóa key ít được sử dụng gần đây nhất, rất phù hợp cho cache server.
#    + Nếu yêu cầu khác (ví dụ: chỉ xóa key có expire), dùng volatile-lru.

# Một số tùy chỉnh thêm nếu muốn scale tải cao:
# tcp-backlog 511
# => Tăng backlog TCP, cải thiện khả năng chịu tải nhiều kết nối đồng thời.

# client-output-buffer-limit normal 0 0 0
# client-output-buffer-limit pubsub 32mb 8mb 60
# => Tối ưu giới hạn buffer client, tránh client bị treo.

# ============================
# Other settings (Cấu hình khác)
# ============================

protected-mode no
# Tắt chế độ bảo vệ tự động (chỉ cho phép truy cập từ localhost).
# => GỢI Ý:
#    + Nếu protected-mode tắt, bắt buộc phải bật requirepass hoặc firewall chặn port Redis.
#    + Nếu không, Redis server sẽ rất dễ bị tấn công!

# ============================
# GỢI Ý BỔ SUNG TỔNG THỂ:
# ============================

# 💡 Nếu mục tiêu benchmark hiệu năng cực cao:
#    - Tạm thời: appendonly no, save ""
#    - Giảm logging xuống warning hoặc thấp hơn.
#    - Tối ưu kernel tcp stack (tcp_tw_reuse, tcp_fin_timeout).

# 💡 Nếu Redis chạy trên server nhiều CPU core:
#    - Cân nhắc chạy nhiều Redis instance nhỏ thay vì 1 instance to (hỗ trợ đa core tốt hơn).

# 💡 Nếu yêu cầu HA (High Availability):
#    - Dùng Redis Sentinel (theo đúng config bạn đang setup).
#    - Hoặc cân nhắc Redis Cluster nếu dataset rất lớn (>10GB).

# 💡 Nếu workload chủ yếu đọc (read-heavy):
#    - Tận dụng replica để scale đọc ra nhiều node.

# 💡 Nếu workload chủ yếu ghi (write-heavy):
#    - Tối ưu appendfsync và kiểm tra performance ổ cứng.