// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token_base.sql

package database

import (
	"context"
	"time"
)

const blockRefreshToken = `-- name: BlockRefreshToken :exec
UPDATE ` + "`" + `acc_token_0001` + "`" + `
SET ` + "`" + `is_refresh` + "`" + ` = 0, ` + "`" + `updated_at` + "`" + ` = NOW()
WHERE ` + "`" + `refresh_token` + "`" + ` = ? and ` + "`" + `access_token` + "`" + ` = ?
`

type BlockRefreshTokenParams struct {
	RefreshToken string
	AccessToken  string
}

func (q *Queries) BlockRefreshToken(ctx context.Context, arg BlockRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, blockRefreshToken, arg.RefreshToken, arg.AccessToken)
	return err
}

const blockRefreshTokenWithId = `-- name: BlockRefreshTokenWithId :exec
UPDATE ` + "`" + `acc_token_0001` + "`" + `
SET ` + "`" + `is_refresh` + "`" + ` = 0, ` + "`" + `updated_at` + "`" + ` = NOW()
WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) BlockRefreshTokenWithId(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, blockRefreshTokenWithId, id)
	return err
}

const createToken = `-- name: CreateToken :exec
INSERT INTO ` + "`" + `acc_token_0001` + "`" + ` (
    ` + "`" + `user_id` + "`" + `, 
    ` + "`" + `is_refresh` + "`" + `, 
    ` + "`" + `access_token` + "`" + `, 
    ` + "`" + `refresh_token` + "`" + `, 
    ` + "`" + `access_token_expires_at` + "`" + `, 
    ` + "`" + `refresh_token_expires_at` + "`" + `,
    ` + "`" + `created_at` + "`" + `,
    ` + "`" + `updated_at` + "`" + `
) VALUES (?, 1, ?, ?, ?, ?, NOW(), NOW())
`

type CreateTokenParams struct {
	UserID                int64
	AccessToken           string
	RefreshToken          string
	AccessTokenExpiresAt  time.Time
	RefreshTokenExpiresAt time.Time
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
	)
	return err
}

const deleteTokenWithId = `-- name: DeleteTokenWithId :exec
DELETE FROM ` + "`" + `acc_token_0001` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) DeleteTokenWithId(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTokenWithId, id)
	return err
}

const getToken = `-- name: GetToken :one
SELECT 
    id, user_id, is_refresh, access_token, refresh_token, access_token_expires_at, refresh_token_expires_at, created_at, updated_at
FROM ` + "`" + `acc_token_0001` + "`" + `
WHERE ` + "`" + `access_token` + "`" + ` = ? AND ` + "`" + `refresh_token` + "`" + ` = ?
LIMIT 1
`

type GetTokenParams struct {
	AccessToken  string
	RefreshToken string
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (AccToken0001, error) {
	row := q.db.QueryRowContext(ctx, getToken, arg.AccessToken, arg.RefreshToken)
	var i AccToken0001
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsRefresh,
		&i.AccessToken,
		&i.RefreshToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenInfoWithAccessToken = `-- name: GetTokenInfoWithAccessToken :one
SELECT 
    id, user_id, is_refresh, access_token, refresh_token, access_token_expires_at, refresh_token_expires_at, created_at, updated_at
FROM ` + "`" + `acc_token_0001` + "`" + `
WHERE ` + "`" + `access_token` + "`" + ` = ?
LIMIT 1
`

func (q *Queries) GetTokenInfoWithAccessToken(ctx context.Context, accessToken string) (AccToken0001, error) {
	row := q.db.QueryRowContext(ctx, getTokenInfoWithAccessToken, accessToken)
	var i AccToken0001
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsRefresh,
		&i.AccessToken,
		&i.RefreshToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenInfoWithId = `-- name: GetTokenInfoWithId :one
SELECT 
    id, user_id, is_refresh, access_token, refresh_token, access_token_expires_at, refresh_token_expires_at, created_at, updated_at
FROM ` + "`" + `acc_token_0001` + "`" + ` 
WHERE ` + "`" + `id` + "`" + ` = ?
LIMIT 1
`

func (q *Queries) GetTokenInfoWithId(ctx context.Context, id int64) (AccToken0001, error) {
	row := q.db.QueryRowContext(ctx, getTokenInfoWithId, id)
	var i AccToken0001
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsRefresh,
		&i.AccessToken,
		&i.RefreshToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenInfoWithRefreshToken = `-- name: GetTokenInfoWithRefreshToken :one
SELECT 
    id, user_id, is_refresh, access_token, refresh_token, access_token_expires_at, refresh_token_expires_at, created_at, updated_at
FROM ` + "`" + `acc_token_0001` + "`" + `
WHERE ` + "`" + `refresh_token` + "`" + ` = ?
LIMIT 1
`

func (q *Queries) GetTokenInfoWithRefreshToken(ctx context.Context, refreshToken string) (AccToken0001, error) {
	row := q.db.QueryRowContext(ctx, getTokenInfoWithRefreshToken, refreshToken)
	var i AccToken0001
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsRefresh,
		&i.AccessToken,
		&i.RefreshToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenInfoWithUserId = `-- name: GetTokenInfoWithUserId :many
SELECT 
    id, user_id, is_refresh, access_token, refresh_token, access_token_expires_at, refresh_token_expires_at, created_at, updated_at
FROM ` + "`" + `acc_token_0001` + "`" + `
WHERE ` + "`" + `user_id` + "`" + ` = ?
ORDER BY ` + "`" + `created_at` + "`" + ` DESC
LIMIT 1
`

func (q *Queries) GetTokenInfoWithUserId(ctx context.Context, userID int64) ([]AccToken0001, error) {
	rows, err := q.db.QueryContext(ctx, getTokenInfoWithUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccToken0001
	for rows.Next() {
		var i AccToken0001
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.IsRefresh,
			&i.AccessToken,
			&i.RefreshToken,
			&i.AccessTokenExpiresAt,
			&i.RefreshTokenExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isTokenRefresh = `-- name: IsTokenRefresh :one
SELECT 
    ` + "`" + `id` + "`" + `
FROM ` + "`" + `acc_token_0001` + "`" + `
WHERE ` + "`" + `refresh_token` + "`" + ` = ? and ` + "`" + `access_token` + "`" + ` = ? and ` + "`" + `is_refresh` + "`" + ` = 1
LIMIT 1
`

type IsTokenRefreshParams struct {
	RefreshToken string
	AccessToken  string
}

func (q *Queries) IsTokenRefresh(ctx context.Context, arg IsTokenRefreshParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isTokenRefresh, arg.RefreshToken, arg.AccessToken)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const isTokenRefreshWithId = `-- name: IsTokenRefreshWithId :one
SELECT 
    ` + "`" + `id` + "`" + `
FROM ` + "`" + `acc_token_0001` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = ? and ` + "`" + `is_refresh` + "`" + ` = 1
LIMIT 1
`

func (q *Queries) IsTokenRefreshWithId(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, isTokenRefreshWithId, id)
	err := row.Scan(&id)
	return id, err
}
