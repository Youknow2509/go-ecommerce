// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type UserTwoFactor001TwoFactorAuthType string

const (
	UserTwoFactor001TwoFactorAuthTypeEMAIL UserTwoFactor001TwoFactorAuthType = "EMAIL"
	UserTwoFactor001TwoFactorAuthTypeSMS   UserTwoFactor001TwoFactorAuthType = "SMS"
	UserTwoFactor001TwoFactorAuthTypeAPP   UserTwoFactor001TwoFactorAuthType = "APP"
)

func (e *UserTwoFactor001TwoFactorAuthType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserTwoFactor001TwoFactorAuthType(s)
	case string:
		*e = UserTwoFactor001TwoFactorAuthType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserTwoFactor001TwoFactorAuthType: %T", src)
	}
	return nil
}

type NullUserTwoFactor001TwoFactorAuthType struct {
	UserTwoFactor001TwoFactorAuthType UserTwoFactor001TwoFactorAuthType
	Valid                             bool // Valid is true if UserTwoFactor001TwoFactorAuthType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserTwoFactor001TwoFactorAuthType) Scan(value interface{}) error {
	if value == nil {
		ns.UserTwoFactor001TwoFactorAuthType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserTwoFactor001TwoFactorAuthType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserTwoFactor001TwoFactorAuthType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserTwoFactor001TwoFactorAuthType), nil
}

type UserBase001 struct {
	// User ID
	UserID int32
	// User account
	UserAccount string
	// User password
	UserPassword string
	// Salt for hashing
	UserSalt string
	// Last login timestamp
	UserLoginTime sql.NullTime
	// Last logout timestamp
	UserLogoutTime sql.NullTime
	// IP address of last login
	UserLoginIp sql.NullString
	// Creation timestamp
	UserCreatedAt sql.NullTime
	// Update timestamp
	UserUpdatedAt sql.NullTime
	// authentication two factor enabled for the user
	IsTwoFactorEnabled sql.NullInt32
}

type UserInfo001 struct {
	// User  ID
	UserID uint64
	// User  account
	UserAccount string
	// User  nickname
	UserNickname sql.NullString
	// User  avatar
	UserAvatar sql.NullString
	// User  state: 0-Locked, 1-Activated, 2-Not Activated
	UserState uint8
	// Mobile phone number
	UserMobile sql.NullString
	// User  gender: 0-Secret, 1-Male, 2-Female
	UserGender sql.NullInt16
	// User  birthday
	UserBirthday sql.NullTime
	// User  email address
	UserEmail sql.NullString
	// Authentication status: 0-Not Authenticated, 1-Pending, 2-Authenticated, 3-Failed
	UserIsAuthentication uint8
	// Record creation time
	CreatedAt sql.NullTime
	// Record update time
	UpdatedAt sql.NullTime
}

// user_two_factor_001
type UserTwoFactor001 struct {
	// Khoa chinh tu dong tang
	TwoFactorID uint32
	// Khoa ngoai lien ket voi bang nguoi dung
	UserID uint32
	// Loai xac thuc 2fa
	TwoFactorAuthType UserTwoFactor001TwoFactorAuthType
	// Ma bi mat xac thuc 2fa
	TwoFactorAuthSecret string
	// So dien thoai xac thuc 2fa
	TwoFactorPhone sql.NullString
	// Email xac thuc 2fa
	TwoFactorEmail sql.NullString
	// Trang thai kich hoat xac thuc 2fa
	TwoFactorIsActive bool
	// Thoi gian tao xac thuc 2fa
	TwoFactorCreatedAt sql.NullTime
	// Thoi gian cap nhat xac thuc 2fa
	TwoFactorUpdatedAt sql.NullTime
}

type UserVerify001 struct {
	// Verification ID
	VerifyID int32
	// One-time password
	VerifyOtp string
	// Verification key - email address, phone number, ....
	VerifyKey string
	// Hash of the verification key
	VerifyKeyHash string
	// Verification type (e.g., 1 for email)
	VerifyType sql.NullInt32
	// Verification status: 1 for verified, 0 for not verified
	IsVerified sql.NullInt32
	// Deletion flag: 1 for deleted, 0 for not deleted
	IsDeleted sql.NullInt32
	// Record creation time
	VerifyCreatedAt sql.NullTime
	// Record update time
	VerifyUpdatedAt sql.NullTime
}
