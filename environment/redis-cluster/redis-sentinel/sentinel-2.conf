# ============================
# Redis Sentinel configuration
# ============================

port 26379
# Port mà Sentinel sẽ lắng nghe. 
# => Mặc định Sentinel chạy trên 26379 (không nên trùng port Redis).

sentinel resolve-hostnames yes
# Cho phép Sentinel resolve hostname thành IP (hữu ích trong môi trường Docker hoặc Kubernetes).

sentinel announce-hostnames yes
# Nếu bật, Sentinel sẽ công bố hostname thay vì IP khi gửi info tới các client khác.
# => GỢI Ý: Nên bật trong môi trường động (Docker, Cloud) khi IP thay đổi liên tục.

# ============================
# Monitor the master
# ============================

# Format: sentinel monitor <master-name> <master-hostname> <master-port> <quorum>
sentinel monitor mymaster redis-master 6379 2
# Cấu hình Sentinel để giám sát master.
# - mymaster: tên logical đặt cho master
# - redis-master: hostname (service name) của master Redis
# - 6379: cổng Redis master
# - 2: quorum: Số Sentinel cần đồng ý rằng master "down" trước khi failover.

# => GỢI Ý:
#    + Quorum >= (Số Sentinel / 2) + 1
#    + Để đảm bảo HA thực sự, cần ít nhất 3 Sentinel nodes trở lên.

# ============================
# Down and failover settings
# ============================

sentinel down-after-milliseconds mymaster 3000
# Thời gian (ms) sau đó Sentinel sẽ coi master là "down" nếu không nhận được phản hồi.
# => GỢI Ý:
#    + Để giá trị không quá thấp (3s hợp lý).
#    + Nếu network thường xuyên trễ, có thể set 5000 hoặc 10000.

sentinel failover-timeout mymaster 30000
# Tổng thời gian timeout cho quá trình failover (30 giây).
# Bao gồm: phát hiện down, bầu chọn, chọn replica, promote.

# ============================
# Set number of replicas to have after failover
# ============================

sentinel parallel-syncs mymaster 1
# Số lượng replica có thể đồng bộ song song cùng lúc khi có master mới.
# => GỢI Ý:
#    + Nếu nhiều replica (3+), có thể tăng lên 2-3 để đẩy nhanh sync.

# ============================
# Client reconfiguration
# ============================

# Client-reconfig-script để cập nhật ứng dụng khi master thay đổi (tùy chọn)
# sentinel client-reconfig-script mymaster /path/to/script.sh
# => Script này sẽ chạy khi failover thành công, để client biết và update config.
# => Rất hữu ích nếu app không tự động cập nhật thông tin master mới.

# ============================
# Authentication settings (Bảo mật)
# ============================

# Set authentication if needed
# sentinel auth-pass mymaster your_password_here
# Nếu master yêu cầu password, thì Sentinel cần thiết lập auth-pass để kết nối.
# => GỢI Ý:
#    + Bắt buộc cấu hình nếu bạn enable requirepass trên master/replica.

# ============================
# Sentinel ID uniqueness
# ============================

sentinel deny-scripts-reconfig no
# Cho phép thay đổi cấu hình từ script hoặc command.
# => GỢI Ý:
#    + Nếu bạn muốn ngăn việc update config từ bên ngoài, set deny-scripts-reconfig yes.

# ============================
# Other settings
# ============================

protected-mode no
# Tắt chế độ protected mode.
# => GỢI Ý:
#    + Cần đảm bảo network nội bộ an toàn.
#    + Nếu expose Sentinel ra internet, bắt buộc để protected-mode yes hoặc dùng firewall chặn truy cập.
  
# ============================
# GỢI Ý BỔ SUNG TỔNG THỂ:
# ============================

# 💡 Production Setup khuyến nghị:
#    - 3 hoặc 5 Sentinel nodes (số lẻ) để quorum hợp lệ.
#    - Các Sentinel nên được deploy trên các server vật lý/VM khác nhau để tránh single point of failure.
#    - Bật announce-hostnames nếu hệ thống động (Docker Swarm, Kubernetes).
#    - Cấu hình alert (Prometheus/Alertmanager hoặc Email) để biết khi nào failover xảy ra.
#    - Nếu dùng SSL/TLS, cần proxy layer ngoài (Redis 7 mới hỗ trợ TLS native).
#
# 💡 Kiểm tra liên tục với lệnh:
#    redis-cli -p 26379 SENTINEL masters
#    redis-cli -p 26379 SENTINEL replicas mymaster
#    redis-cli -p 26379 SENTINEL sentinels mymaster
